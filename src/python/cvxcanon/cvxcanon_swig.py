# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cvxcanon_swig', [dirname(__file__)])
        except ImportError:
            import _cvxcanon_swig
            return _cvxcanon_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_cvxcanon_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _cvxcanon_swig = swig_import_helper()
    del swig_import_helper
else:
    import _cvxcanon_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cvxcanon_swig.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _cvxcanon_swig.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _cvxcanon_swig.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _cvxcanon_swig.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _cvxcanon_swig.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _cvxcanon_swig.SwigPyIterator_equal(self, x)

    def copy(self):
        return _cvxcanon_swig.SwigPyIterator_copy(self)

    def next(self):
        return _cvxcanon_swig.SwigPyIterator_next(self)

    def __next__(self):
        return _cvxcanon_swig.SwigPyIterator___next__(self)

    def previous(self):
        return _cvxcanon_swig.SwigPyIterator_previous(self)

    def advance(self, n):
        return _cvxcanon_swig.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _cvxcanon_swig.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _cvxcanon_swig.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _cvxcanon_swig.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _cvxcanon_swig.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _cvxcanon_swig.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _cvxcanon_swig.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _cvxcanon_swig.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _cvxcanon_swig.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cvxcanon_swig.IntVector___nonzero__(self)

    def __bool__(self):
        return _cvxcanon_swig.IntVector___bool__(self)

    def __len__(self):
        return _cvxcanon_swig.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _cvxcanon_swig.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _cvxcanon_swig.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _cvxcanon_swig.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _cvxcanon_swig.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _cvxcanon_swig.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _cvxcanon_swig.IntVector___setitem__(self, *args)

    def pop(self):
        return _cvxcanon_swig.IntVector_pop(self)

    def append(self, x):
        return _cvxcanon_swig.IntVector_append(self, x)

    def empty(self):
        return _cvxcanon_swig.IntVector_empty(self)

    def size(self):
        return _cvxcanon_swig.IntVector_size(self)

    def swap(self, v):
        return _cvxcanon_swig.IntVector_swap(self, v)

    def begin(self):
        return _cvxcanon_swig.IntVector_begin(self)

    def end(self):
        return _cvxcanon_swig.IntVector_end(self)

    def rbegin(self):
        return _cvxcanon_swig.IntVector_rbegin(self)

    def rend(self):
        return _cvxcanon_swig.IntVector_rend(self)

    def clear(self):
        return _cvxcanon_swig.IntVector_clear(self)

    def get_allocator(self):
        return _cvxcanon_swig.IntVector_get_allocator(self)

    def pop_back(self):
        return _cvxcanon_swig.IntVector_pop_back(self)

    def erase(self, *args):
        return _cvxcanon_swig.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _cvxcanon_swig.new_IntVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _cvxcanon_swig.IntVector_push_back(self, x)

    def front(self):
        return _cvxcanon_swig.IntVector_front(self)

    def back(self):
        return _cvxcanon_swig.IntVector_back(self)

    def assign(self, n, x):
        return _cvxcanon_swig.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _cvxcanon_swig.IntVector_resize(self, *args)

    def insert(self, *args):
        return _cvxcanon_swig.IntVector_insert(self, *args)

    def reserve(self, n):
        return _cvxcanon_swig.IntVector_reserve(self, n)

    def capacity(self):
        return _cvxcanon_swig.IntVector_capacity(self)
    __swig_destroy__ = _cvxcanon_swig.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _cvxcanon_swig.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _cvxcanon_swig.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cvxcanon_swig.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _cvxcanon_swig.DoubleVector___bool__(self)

    def __len__(self):
        return _cvxcanon_swig.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _cvxcanon_swig.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _cvxcanon_swig.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _cvxcanon_swig.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _cvxcanon_swig.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _cvxcanon_swig.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _cvxcanon_swig.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _cvxcanon_swig.DoubleVector_pop(self)

    def append(self, x):
        return _cvxcanon_swig.DoubleVector_append(self, x)

    def empty(self):
        return _cvxcanon_swig.DoubleVector_empty(self)

    def size(self):
        return _cvxcanon_swig.DoubleVector_size(self)

    def swap(self, v):
        return _cvxcanon_swig.DoubleVector_swap(self, v)

    def begin(self):
        return _cvxcanon_swig.DoubleVector_begin(self)

    def end(self):
        return _cvxcanon_swig.DoubleVector_end(self)

    def rbegin(self):
        return _cvxcanon_swig.DoubleVector_rbegin(self)

    def rend(self):
        return _cvxcanon_swig.DoubleVector_rend(self)

    def clear(self):
        return _cvxcanon_swig.DoubleVector_clear(self)

    def get_allocator(self):
        return _cvxcanon_swig.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _cvxcanon_swig.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _cvxcanon_swig.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _cvxcanon_swig.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _cvxcanon_swig.DoubleVector_push_back(self, x)

    def front(self):
        return _cvxcanon_swig.DoubleVector_front(self)

    def back(self):
        return _cvxcanon_swig.DoubleVector_back(self)

    def assign(self, n, x):
        return _cvxcanon_swig.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _cvxcanon_swig.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _cvxcanon_swig.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _cvxcanon_swig.DoubleVector_reserve(self, n)

    def capacity(self):
        return _cvxcanon_swig.DoubleVector_capacity(self)
    __swig_destroy__ = _cvxcanon_swig.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _cvxcanon_swig.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class IntVector2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector2D, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _cvxcanon_swig.IntVector2D_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cvxcanon_swig.IntVector2D___nonzero__(self)

    def __bool__(self):
        return _cvxcanon_swig.IntVector2D___bool__(self)

    def __len__(self):
        return _cvxcanon_swig.IntVector2D___len__(self)

    def __getslice__(self, i, j):
        return _cvxcanon_swig.IntVector2D___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _cvxcanon_swig.IntVector2D___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _cvxcanon_swig.IntVector2D___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _cvxcanon_swig.IntVector2D___delitem__(self, *args)

    def __getitem__(self, *args):
        return _cvxcanon_swig.IntVector2D___getitem__(self, *args)

    def __setitem__(self, *args):
        return _cvxcanon_swig.IntVector2D___setitem__(self, *args)

    def pop(self):
        return _cvxcanon_swig.IntVector2D_pop(self)

    def append(self, x):
        return _cvxcanon_swig.IntVector2D_append(self, x)

    def empty(self):
        return _cvxcanon_swig.IntVector2D_empty(self)

    def size(self):
        return _cvxcanon_swig.IntVector2D_size(self)

    def swap(self, v):
        return _cvxcanon_swig.IntVector2D_swap(self, v)

    def begin(self):
        return _cvxcanon_swig.IntVector2D_begin(self)

    def end(self):
        return _cvxcanon_swig.IntVector2D_end(self)

    def rbegin(self):
        return _cvxcanon_swig.IntVector2D_rbegin(self)

    def rend(self):
        return _cvxcanon_swig.IntVector2D_rend(self)

    def clear(self):
        return _cvxcanon_swig.IntVector2D_clear(self)

    def get_allocator(self):
        return _cvxcanon_swig.IntVector2D_get_allocator(self)

    def pop_back(self):
        return _cvxcanon_swig.IntVector2D_pop_back(self)

    def erase(self, *args):
        return _cvxcanon_swig.IntVector2D_erase(self, *args)

    def __init__(self, *args):
        this = _cvxcanon_swig.new_IntVector2D(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _cvxcanon_swig.IntVector2D_push_back(self, x)

    def front(self):
        return _cvxcanon_swig.IntVector2D_front(self)

    def back(self):
        return _cvxcanon_swig.IntVector2D_back(self)

    def assign(self, n, x):
        return _cvxcanon_swig.IntVector2D_assign(self, n, x)

    def resize(self, *args):
        return _cvxcanon_swig.IntVector2D_resize(self, *args)

    def insert(self, *args):
        return _cvxcanon_swig.IntVector2D_insert(self, *args)

    def reserve(self, n):
        return _cvxcanon_swig.IntVector2D_reserve(self, n)

    def capacity(self):
        return _cvxcanon_swig.IntVector2D_capacity(self)
    __swig_destroy__ = _cvxcanon_swig.delete_IntVector2D
    __del__ = lambda self: None
IntVector2D_swigregister = _cvxcanon_swig.IntVector2D_swigregister
IntVector2D_swigregister(IntVector2D)

class DoubleVector2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector2D, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _cvxcanon_swig.DoubleVector2D_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cvxcanon_swig.DoubleVector2D___nonzero__(self)

    def __bool__(self):
        return _cvxcanon_swig.DoubleVector2D___bool__(self)

    def __len__(self):
        return _cvxcanon_swig.DoubleVector2D___len__(self)

    def __getslice__(self, i, j):
        return _cvxcanon_swig.DoubleVector2D___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _cvxcanon_swig.DoubleVector2D___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _cvxcanon_swig.DoubleVector2D___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _cvxcanon_swig.DoubleVector2D___delitem__(self, *args)

    def __getitem__(self, *args):
        return _cvxcanon_swig.DoubleVector2D___getitem__(self, *args)

    def __setitem__(self, *args):
        return _cvxcanon_swig.DoubleVector2D___setitem__(self, *args)

    def pop(self):
        return _cvxcanon_swig.DoubleVector2D_pop(self)

    def append(self, x):
        return _cvxcanon_swig.DoubleVector2D_append(self, x)

    def empty(self):
        return _cvxcanon_swig.DoubleVector2D_empty(self)

    def size(self):
        return _cvxcanon_swig.DoubleVector2D_size(self)

    def swap(self, v):
        return _cvxcanon_swig.DoubleVector2D_swap(self, v)

    def begin(self):
        return _cvxcanon_swig.DoubleVector2D_begin(self)

    def end(self):
        return _cvxcanon_swig.DoubleVector2D_end(self)

    def rbegin(self):
        return _cvxcanon_swig.DoubleVector2D_rbegin(self)

    def rend(self):
        return _cvxcanon_swig.DoubleVector2D_rend(self)

    def clear(self):
        return _cvxcanon_swig.DoubleVector2D_clear(self)

    def get_allocator(self):
        return _cvxcanon_swig.DoubleVector2D_get_allocator(self)

    def pop_back(self):
        return _cvxcanon_swig.DoubleVector2D_pop_back(self)

    def erase(self, *args):
        return _cvxcanon_swig.DoubleVector2D_erase(self, *args)

    def __init__(self, *args):
        this = _cvxcanon_swig.new_DoubleVector2D(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _cvxcanon_swig.DoubleVector2D_push_back(self, x)

    def front(self):
        return _cvxcanon_swig.DoubleVector2D_front(self)

    def back(self):
        return _cvxcanon_swig.DoubleVector2D_back(self)

    def assign(self, n, x):
        return _cvxcanon_swig.DoubleVector2D_assign(self, n, x)

    def resize(self, *args):
        return _cvxcanon_swig.DoubleVector2D_resize(self, *args)

    def insert(self, *args):
        return _cvxcanon_swig.DoubleVector2D_insert(self, *args)

    def reserve(self, n):
        return _cvxcanon_swig.DoubleVector2D_reserve(self, n)

    def capacity(self):
        return _cvxcanon_swig.DoubleVector2D_capacity(self)
    __swig_destroy__ = _cvxcanon_swig.delete_DoubleVector2D
    __del__ = lambda self: None
DoubleVector2D_swigregister = _cvxcanon_swig.DoubleVector2D_swigregister
DoubleVector2D_swigregister(DoubleVector2D)

class IntIntMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntIntMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntIntMap, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _cvxcanon_swig.IntIntMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cvxcanon_swig.IntIntMap___nonzero__(self)

    def __bool__(self):
        return _cvxcanon_swig.IntIntMap___bool__(self)

    def __len__(self):
        return _cvxcanon_swig.IntIntMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _cvxcanon_swig.IntIntMap___getitem__(self, key)

    def __delitem__(self, key):
        return _cvxcanon_swig.IntIntMap___delitem__(self, key)

    def has_key(self, key):
        return _cvxcanon_swig.IntIntMap_has_key(self, key)

    def keys(self):
        return _cvxcanon_swig.IntIntMap_keys(self)

    def values(self):
        return _cvxcanon_swig.IntIntMap_values(self)

    def items(self):
        return _cvxcanon_swig.IntIntMap_items(self)

    def __contains__(self, key):
        return _cvxcanon_swig.IntIntMap___contains__(self, key)

    def key_iterator(self):
        return _cvxcanon_swig.IntIntMap_key_iterator(self)

    def value_iterator(self):
        return _cvxcanon_swig.IntIntMap_value_iterator(self)

    def __setitem__(self, *args):
        return _cvxcanon_swig.IntIntMap___setitem__(self, *args)

    def asdict(self):
        return _cvxcanon_swig.IntIntMap_asdict(self)

    def __init__(self, *args):
        this = _cvxcanon_swig.new_IntIntMap(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def empty(self):
        return _cvxcanon_swig.IntIntMap_empty(self)

    def size(self):
        return _cvxcanon_swig.IntIntMap_size(self)

    def swap(self, v):
        return _cvxcanon_swig.IntIntMap_swap(self, v)

    def begin(self):
        return _cvxcanon_swig.IntIntMap_begin(self)

    def end(self):
        return _cvxcanon_swig.IntIntMap_end(self)

    def rbegin(self):
        return _cvxcanon_swig.IntIntMap_rbegin(self)

    def rend(self):
        return _cvxcanon_swig.IntIntMap_rend(self)

    def clear(self):
        return _cvxcanon_swig.IntIntMap_clear(self)

    def get_allocator(self):
        return _cvxcanon_swig.IntIntMap_get_allocator(self)

    def count(self, x):
        return _cvxcanon_swig.IntIntMap_count(self, x)

    def erase(self, *args):
        return _cvxcanon_swig.IntIntMap_erase(self, *args)

    def find(self, x):
        return _cvxcanon_swig.IntIntMap_find(self, x)

    def lower_bound(self, x):
        return _cvxcanon_swig.IntIntMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _cvxcanon_swig.IntIntMap_upper_bound(self, x)
    __swig_destroy__ = _cvxcanon_swig.delete_IntIntMap
    __del__ = lambda self: None
IntIntMap_swigregister = _cvxcanon_swig.IntIntMap_swigregister
IntIntMap_swigregister(IntIntMap)

class LinOpVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinOpVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LinOpVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _cvxcanon_swig.LinOpVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cvxcanon_swig.LinOpVector___nonzero__(self)

    def __bool__(self):
        return _cvxcanon_swig.LinOpVector___bool__(self)

    def __len__(self):
        return _cvxcanon_swig.LinOpVector___len__(self)

    def __getslice__(self, i, j):
        return _cvxcanon_swig.LinOpVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _cvxcanon_swig.LinOpVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _cvxcanon_swig.LinOpVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _cvxcanon_swig.LinOpVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _cvxcanon_swig.LinOpVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _cvxcanon_swig.LinOpVector___setitem__(self, *args)

    def pop(self):
        return _cvxcanon_swig.LinOpVector_pop(self)

    def append(self, x):
        return _cvxcanon_swig.LinOpVector_append(self, x)

    def empty(self):
        return _cvxcanon_swig.LinOpVector_empty(self)

    def size(self):
        return _cvxcanon_swig.LinOpVector_size(self)

    def swap(self, v):
        return _cvxcanon_swig.LinOpVector_swap(self, v)

    def begin(self):
        return _cvxcanon_swig.LinOpVector_begin(self)

    def end(self):
        return _cvxcanon_swig.LinOpVector_end(self)

    def rbegin(self):
        return _cvxcanon_swig.LinOpVector_rbegin(self)

    def rend(self):
        return _cvxcanon_swig.LinOpVector_rend(self)

    def clear(self):
        return _cvxcanon_swig.LinOpVector_clear(self)

    def get_allocator(self):
        return _cvxcanon_swig.LinOpVector_get_allocator(self)

    def pop_back(self):
        return _cvxcanon_swig.LinOpVector_pop_back(self)

    def erase(self, *args):
        return _cvxcanon_swig.LinOpVector_erase(self, *args)

    def __init__(self, *args):
        this = _cvxcanon_swig.new_LinOpVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _cvxcanon_swig.LinOpVector_push_back(self, x)

    def front(self):
        return _cvxcanon_swig.LinOpVector_front(self)

    def back(self):
        return _cvxcanon_swig.LinOpVector_back(self)

    def assign(self, n, x):
        return _cvxcanon_swig.LinOpVector_assign(self, n, x)

    def resize(self, *args):
        return _cvxcanon_swig.LinOpVector_resize(self, *args)

    def insert(self, *args):
        return _cvxcanon_swig.LinOpVector_insert(self, *args)

    def reserve(self, n):
        return _cvxcanon_swig.LinOpVector_reserve(self, n)

    def capacity(self):
        return _cvxcanon_swig.LinOpVector_capacity(self)
    __swig_destroy__ = _cvxcanon_swig.delete_LinOpVector
    __del__ = lambda self: None
LinOpVector_swigregister = _cvxcanon_swig.LinOpVector_swigregister
LinOpVector_swigregister(LinOpVector)

class ExpressionVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExpressionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExpressionVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _cvxcanon_swig.ExpressionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cvxcanon_swig.ExpressionVector___nonzero__(self)

    def __bool__(self):
        return _cvxcanon_swig.ExpressionVector___bool__(self)

    def __len__(self):
        return _cvxcanon_swig.ExpressionVector___len__(self)

    def __getslice__(self, i, j):
        return _cvxcanon_swig.ExpressionVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _cvxcanon_swig.ExpressionVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _cvxcanon_swig.ExpressionVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _cvxcanon_swig.ExpressionVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _cvxcanon_swig.ExpressionVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _cvxcanon_swig.ExpressionVector___setitem__(self, *args)

    def pop(self):
        return _cvxcanon_swig.ExpressionVector_pop(self)

    def append(self, x):
        return _cvxcanon_swig.ExpressionVector_append(self, x)

    def empty(self):
        return _cvxcanon_swig.ExpressionVector_empty(self)

    def size(self):
        return _cvxcanon_swig.ExpressionVector_size(self)

    def swap(self, v):
        return _cvxcanon_swig.ExpressionVector_swap(self, v)

    def begin(self):
        return _cvxcanon_swig.ExpressionVector_begin(self)

    def end(self):
        return _cvxcanon_swig.ExpressionVector_end(self)

    def rbegin(self):
        return _cvxcanon_swig.ExpressionVector_rbegin(self)

    def rend(self):
        return _cvxcanon_swig.ExpressionVector_rend(self)

    def clear(self):
        return _cvxcanon_swig.ExpressionVector_clear(self)

    def get_allocator(self):
        return _cvxcanon_swig.ExpressionVector_get_allocator(self)

    def pop_back(self):
        return _cvxcanon_swig.ExpressionVector_pop_back(self)

    def erase(self, *args):
        return _cvxcanon_swig.ExpressionVector_erase(self, *args)

    def __init__(self, *args):
        this = _cvxcanon_swig.new_ExpressionVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _cvxcanon_swig.ExpressionVector_push_back(self, x)

    def front(self):
        return _cvxcanon_swig.ExpressionVector_front(self)

    def back(self):
        return _cvxcanon_swig.ExpressionVector_back(self)

    def assign(self, n, x):
        return _cvxcanon_swig.ExpressionVector_assign(self, n, x)

    def resize(self, *args):
        return _cvxcanon_swig.ExpressionVector_resize(self, *args)

    def insert(self, *args):
        return _cvxcanon_swig.ExpressionVector_insert(self, *args)

    def reserve(self, n):
        return _cvxcanon_swig.ExpressionVector_reserve(self, n)

    def capacity(self):
        return _cvxcanon_swig.ExpressionVector_capacity(self)
    __swig_destroy__ = _cvxcanon_swig.delete_ExpressionVector
    __del__ = lambda self: None
ExpressionVector_swigregister = _cvxcanon_swig.ExpressionVector_swigregister
ExpressionVector_swigregister(ExpressionVector)

class SliceVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SliceVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SliceVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _cvxcanon_swig.SliceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cvxcanon_swig.SliceVector___nonzero__(self)

    def __bool__(self):
        return _cvxcanon_swig.SliceVector___bool__(self)

    def __len__(self):
        return _cvxcanon_swig.SliceVector___len__(self)

    def __getslice__(self, i, j):
        return _cvxcanon_swig.SliceVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _cvxcanon_swig.SliceVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _cvxcanon_swig.SliceVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _cvxcanon_swig.SliceVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _cvxcanon_swig.SliceVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _cvxcanon_swig.SliceVector___setitem__(self, *args)

    def pop(self):
        return _cvxcanon_swig.SliceVector_pop(self)

    def append(self, x):
        return _cvxcanon_swig.SliceVector_append(self, x)

    def empty(self):
        return _cvxcanon_swig.SliceVector_empty(self)

    def size(self):
        return _cvxcanon_swig.SliceVector_size(self)

    def swap(self, v):
        return _cvxcanon_swig.SliceVector_swap(self, v)

    def begin(self):
        return _cvxcanon_swig.SliceVector_begin(self)

    def end(self):
        return _cvxcanon_swig.SliceVector_end(self)

    def rbegin(self):
        return _cvxcanon_swig.SliceVector_rbegin(self)

    def rend(self):
        return _cvxcanon_swig.SliceVector_rend(self)

    def clear(self):
        return _cvxcanon_swig.SliceVector_clear(self)

    def get_allocator(self):
        return _cvxcanon_swig.SliceVector_get_allocator(self)

    def pop_back(self):
        return _cvxcanon_swig.SliceVector_pop_back(self)

    def erase(self, *args):
        return _cvxcanon_swig.SliceVector_erase(self, *args)

    def __init__(self, *args):
        this = _cvxcanon_swig.new_SliceVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _cvxcanon_swig.SliceVector_push_back(self, x)

    def front(self):
        return _cvxcanon_swig.SliceVector_front(self)

    def back(self):
        return _cvxcanon_swig.SliceVector_back(self)

    def assign(self, n, x):
        return _cvxcanon_swig.SliceVector_assign(self, n, x)

    def resize(self, *args):
        return _cvxcanon_swig.SliceVector_resize(self, *args)

    def insert(self, *args):
        return _cvxcanon_swig.SliceVector_insert(self, *args)

    def reserve(self, n):
        return _cvxcanon_swig.SliceVector_reserve(self, n)

    def capacity(self):
        return _cvxcanon_swig.SliceVector_capacity(self)
    __swig_destroy__ = _cvxcanon_swig.delete_SliceVector
    __del__ = lambda self: None
SliceVector_swigregister = _cvxcanon_swig.SliceVector_swigregister
SliceVector_swigregister(SliceVector)


def build_matrix(*args):
    return _cvxcanon_swig.build_matrix(*args)
build_matrix = _cvxcanon_swig.build_matrix
class ExpressionAttributes(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExpressionAttributes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExpressionAttributes, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _cvxcanon_swig.delete_ExpressionAttributes
    __del__ = lambda self: None

    def __init__(self):
        this = _cvxcanon_swig.new_ExpressionAttributes()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
ExpressionAttributes_swigregister = _cvxcanon_swig.ExpressionAttributes_swigregister
ExpressionAttributes_swigregister(ExpressionAttributes)

class Expression(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expression, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Expression, name)
    __repr__ = _swig_repr
    ADD = _cvxcanon_swig.Expression_ADD
    DIAG_MAT = _cvxcanon_swig.Expression_DIAG_MAT
    DIAG_VEC = _cvxcanon_swig.Expression_DIAG_VEC
    HSTACK = _cvxcanon_swig.Expression_HSTACK
    INDEX = _cvxcanon_swig.Expression_INDEX
    KRON = _cvxcanon_swig.Expression_KRON
    MUL = _cvxcanon_swig.Expression_MUL
    NEG = _cvxcanon_swig.Expression_NEG
    RESHAPE = _cvxcanon_swig.Expression_RESHAPE
    SUM_ENTRIES = _cvxcanon_swig.Expression_SUM_ENTRIES
    TRACE = _cvxcanon_swig.Expression_TRACE
    TRANSPOSE = _cvxcanon_swig.Expression_TRANSPOSE
    UPPER_TRI = _cvxcanon_swig.Expression_UPPER_TRI
    VSTACK = _cvxcanon_swig.Expression_VSTACK
    ABS = _cvxcanon_swig.Expression_ABS
    ENTR = _cvxcanon_swig.Expression_ENTR
    EXP = _cvxcanon_swig.Expression_EXP
    HUBER = _cvxcanon_swig.Expression_HUBER
    KL_DIV = _cvxcanon_swig.Expression_KL_DIV
    LOG = _cvxcanon_swig.Expression_LOG
    LOG1P = _cvxcanon_swig.Expression_LOG1P
    LOGISTIC = _cvxcanon_swig.Expression_LOGISTIC
    MAX_ELEMWISE = _cvxcanon_swig.Expression_MAX_ELEMWISE
    POWER = _cvxcanon_swig.Expression_POWER
    GEO_MEAN = _cvxcanon_swig.Expression_GEO_MEAN
    LAMBDA_MAX = _cvxcanon_swig.Expression_LAMBDA_MAX
    LOG_DET = _cvxcanon_swig.Expression_LOG_DET
    LOG_SUM_EXP = _cvxcanon_swig.Expression_LOG_SUM_EXP
    MATRIX_FRAC = _cvxcanon_swig.Expression_MATRIX_FRAC
    MAX_ENTRIES = _cvxcanon_swig.Expression_MAX_ENTRIES
    NORM_NUC = _cvxcanon_swig.Expression_NORM_NUC
    P_NORM = _cvxcanon_swig.Expression_P_NORM
    QUAD_OVER_LIN = _cvxcanon_swig.Expression_QUAD_OVER_LIN
    SIGMA_MAX = _cvxcanon_swig.Expression_SIGMA_MAX
    SUM_LARGEST = _cvxcanon_swig.Expression_SUM_LARGEST
    EQ = _cvxcanon_swig.Expression_EQ
    EXP_CONE = _cvxcanon_swig.Expression_EXP_CONE
    LEQ = _cvxcanon_swig.Expression_LEQ
    SDP = _cvxcanon_swig.Expression_SDP
    SDP_VEC = _cvxcanon_swig.Expression_SDP_VEC
    SOC = _cvxcanon_swig.Expression_SOC
    CONST = _cvxcanon_swig.Expression_CONST
    PARAM = _cvxcanon_swig.Expression_PARAM
    VAR = _cvxcanon_swig.Expression_VAR
    NUM_TYPES = _cvxcanon_swig.Expression_NUM_TYPES

    def type(self):
        return _cvxcanon_swig.Expression_type(self)

    def args(self):
        return _cvxcanon_swig.Expression_args(self)

    def arg(self, i):
        return _cvxcanon_swig.Expression_arg(self, i)

    def attr_ptr(self):
        return _cvxcanon_swig.Expression_attr_ptr(self)

    def __init__(self, *args):
        this = _cvxcanon_swig.new_Expression(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _cvxcanon_swig.delete_Expression
    __del__ = lambda self: None
Expression_swigregister = _cvxcanon_swig.Expression_swigregister
Expression_swigregister(Expression)
cvar = _cvxcanon_swig.cvar
kNoAxis = cvar.kNoAxis

class Problem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Problem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Problem, name)
    __repr__ = _swig_repr
    MAXIMIZE = _cvxcanon_swig.Problem_MAXIMIZE
    MINIMIZE = _cvxcanon_swig.Problem_MINIMIZE

    def __init__(self, *args):
        this = _cvxcanon_swig.new_Problem(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["sense"] = _cvxcanon_swig.Problem_sense_set
    __swig_getmethods__["sense"] = _cvxcanon_swig.Problem_sense_get
    if _newclass:
        sense = _swig_property(_cvxcanon_swig.Problem_sense_get, _cvxcanon_swig.Problem_sense_set)
    __swig_setmethods__["objective"] = _cvxcanon_swig.Problem_objective_set
    __swig_getmethods__["objective"] = _cvxcanon_swig.Problem_objective_get
    if _newclass:
        objective = _swig_property(_cvxcanon_swig.Problem_objective_get, _cvxcanon_swig.Problem_objective_set)
    __swig_setmethods__["constraints"] = _cvxcanon_swig.Problem_constraints_set
    __swig_getmethods__["constraints"] = _cvxcanon_swig.Problem_constraints_get
    if _newclass:
        constraints = _swig_property(_cvxcanon_swig.Problem_constraints_get, _cvxcanon_swig.Problem_constraints_set)
    __swig_destroy__ = _cvxcanon_swig.delete_Problem
    __del__ = lambda self: None
Problem_swigregister = _cvxcanon_swig.Problem_swigregister
Problem_swigregister(Problem)

class Size(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Size, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Size, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dims"] = _cvxcanon_swig.Size_dims_set
    __swig_getmethods__["dims"] = _cvxcanon_swig.Size_dims_get
    if _newclass:
        dims = _swig_property(_cvxcanon_swig.Size_dims_get, _cvxcanon_swig.Size_dims_set)

    def __init__(self):
        this = _cvxcanon_swig.new_Size()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _cvxcanon_swig.delete_Size
    __del__ = lambda self: None
Size_swigregister = _cvxcanon_swig.Size_swigregister
Size_swigregister(Size)

class Constant(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Constant, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Constant, name)
    __repr__ = _swig_repr

    def set_dense_data(self, matrix):
        return _cvxcanon_swig.Constant_set_dense_data(self, matrix)

    def set_sparse_data(self, data, row_idxs, col_idxs, rows, cols):
        return _cvxcanon_swig.Constant_set_sparse_data(self, data, row_idxs, col_idxs, rows, cols)

    def size(self):
        return _cvxcanon_swig.Constant_size(self)
    __swig_setmethods__["sparse"] = _cvxcanon_swig.Constant_sparse_set
    __swig_getmethods__["sparse"] = _cvxcanon_swig.Constant_sparse_get
    if _newclass:
        sparse = _swig_property(_cvxcanon_swig.Constant_sparse_get, _cvxcanon_swig.Constant_sparse_set)
    __swig_setmethods__["dense_data"] = _cvxcanon_swig.Constant_dense_data_set
    __swig_getmethods__["dense_data"] = _cvxcanon_swig.Constant_dense_data_get
    if _newclass:
        dense_data = _swig_property(_cvxcanon_swig.Constant_dense_data_get, _cvxcanon_swig.Constant_dense_data_set)
    __swig_setmethods__["sparse_data"] = _cvxcanon_swig.Constant_sparse_data_set
    __swig_getmethods__["sparse_data"] = _cvxcanon_swig.Constant_sparse_data_get
    if _newclass:
        sparse_data = _swig_property(_cvxcanon_swig.Constant_sparse_data_get, _cvxcanon_swig.Constant_sparse_data_set)

    def __init__(self):
        this = _cvxcanon_swig.new_Constant()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _cvxcanon_swig.delete_Constant
    __del__ = lambda self: None
Constant_swigregister = _cvxcanon_swig.Constant_swigregister
Constant_swigregister(Constant)

class ConstAttributes(ExpressionAttributes):
    __swig_setmethods__ = {}
    for _s in [ExpressionAttributes]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstAttributes, name, value)
    __swig_getmethods__ = {}
    for _s in [ExpressionAttributes]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstAttributes, name)
    __repr__ = _swig_repr
    __swig_setmethods__["constant"] = _cvxcanon_swig.ConstAttributes_constant_set
    __swig_getmethods__["constant"] = _cvxcanon_swig.ConstAttributes_constant_get
    if _newclass:
        constant = _swig_property(_cvxcanon_swig.ConstAttributes_constant_get, _cvxcanon_swig.ConstAttributes_constant_set)

    def __init__(self):
        this = _cvxcanon_swig.new_ConstAttributes()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _cvxcanon_swig.delete_ConstAttributes
    __del__ = lambda self: None
ConstAttributes_swigregister = _cvxcanon_swig.ConstAttributes_swigregister
ConstAttributes_swigregister(ConstAttributes)

class ParamAttributes(ExpressionAttributes):
    __swig_setmethods__ = {}
    for _s in [ExpressionAttributes]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParamAttributes, name, value)
    __swig_getmethods__ = {}
    for _s in [ExpressionAttributes]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParamAttributes, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _cvxcanon_swig.ParamAttributes_id_set
    __swig_getmethods__["id"] = _cvxcanon_swig.ParamAttributes_id_get
    if _newclass:
        id = _swig_property(_cvxcanon_swig.ParamAttributes_id_get, _cvxcanon_swig.ParamAttributes_id_set)
    __swig_setmethods__["size"] = _cvxcanon_swig.ParamAttributes_size_set
    __swig_getmethods__["size"] = _cvxcanon_swig.ParamAttributes_size_get
    if _newclass:
        size = _swig_property(_cvxcanon_swig.ParamAttributes_size_get, _cvxcanon_swig.ParamAttributes_size_set)
    __swig_setmethods__["constant"] = _cvxcanon_swig.ParamAttributes_constant_set
    __swig_getmethods__["constant"] = _cvxcanon_swig.ParamAttributes_constant_get
    if _newclass:
        constant = _swig_property(_cvxcanon_swig.ParamAttributes_constant_get, _cvxcanon_swig.ParamAttributes_constant_set)

    def __init__(self):
        this = _cvxcanon_swig.new_ParamAttributes()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _cvxcanon_swig.delete_ParamAttributes
    __del__ = lambda self: None
ParamAttributes_swigregister = _cvxcanon_swig.ParamAttributes_swigregister
ParamAttributes_swigregister(ParamAttributes)

class VarAttributes(ExpressionAttributes):
    __swig_setmethods__ = {}
    for _s in [ExpressionAttributes]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VarAttributes, name, value)
    __swig_getmethods__ = {}
    for _s in [ExpressionAttributes]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VarAttributes, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _cvxcanon_swig.VarAttributes_id_set
    __swig_getmethods__["id"] = _cvxcanon_swig.VarAttributes_id_get
    if _newclass:
        id = _swig_property(_cvxcanon_swig.VarAttributes_id_get, _cvxcanon_swig.VarAttributes_id_set)
    __swig_setmethods__["size"] = _cvxcanon_swig.VarAttributes_size_set
    __swig_getmethods__["size"] = _cvxcanon_swig.VarAttributes_size_get
    if _newclass:
        size = _swig_property(_cvxcanon_swig.VarAttributes_size_get, _cvxcanon_swig.VarAttributes_size_set)

    def __init__(self):
        this = _cvxcanon_swig.new_VarAttributes()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _cvxcanon_swig.delete_VarAttributes
    __del__ = lambda self: None
VarAttributes_swigregister = _cvxcanon_swig.VarAttributes_swigregister
VarAttributes_swigregister(VarAttributes)

class PNormAttributes(ExpressionAttributes):
    __swig_setmethods__ = {}
    for _s in [ExpressionAttributes]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PNormAttributes, name, value)
    __swig_getmethods__ = {}
    for _s in [ExpressionAttributes]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PNormAttributes, name)
    __repr__ = _swig_repr
    __swig_setmethods__["p"] = _cvxcanon_swig.PNormAttributes_p_set
    __swig_getmethods__["p"] = _cvxcanon_swig.PNormAttributes_p_get
    if _newclass:
        p = _swig_property(_cvxcanon_swig.PNormAttributes_p_get, _cvxcanon_swig.PNormAttributes_p_set)
    __swig_setmethods__["axis"] = _cvxcanon_swig.PNormAttributes_axis_set
    __swig_getmethods__["axis"] = _cvxcanon_swig.PNormAttributes_axis_get
    if _newclass:
        axis = _swig_property(_cvxcanon_swig.PNormAttributes_axis_get, _cvxcanon_swig.PNormAttributes_axis_set)

    def __init__(self):
        this = _cvxcanon_swig.new_PNormAttributes()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _cvxcanon_swig.delete_PNormAttributes
    __del__ = lambda self: None
PNormAttributes_swigregister = _cvxcanon_swig.PNormAttributes_swigregister
PNormAttributes_swigregister(PNormAttributes)

class PowerAttributes(ExpressionAttributes):
    __swig_setmethods__ = {}
    for _s in [ExpressionAttributes]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PowerAttributes, name, value)
    __swig_getmethods__ = {}
    for _s in [ExpressionAttributes]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PowerAttributes, name)
    __repr__ = _swig_repr
    __swig_setmethods__["p"] = _cvxcanon_swig.PowerAttributes_p_set
    __swig_getmethods__["p"] = _cvxcanon_swig.PowerAttributes_p_get
    if _newclass:
        p = _swig_property(_cvxcanon_swig.PowerAttributes_p_get, _cvxcanon_swig.PowerAttributes_p_set)

    def __init__(self):
        this = _cvxcanon_swig.new_PowerAttributes()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _cvxcanon_swig.delete_PowerAttributes
    __del__ = lambda self: None
PowerAttributes_swigregister = _cvxcanon_swig.PowerAttributes_swigregister
PowerAttributes_swigregister(PowerAttributes)

class ReshapeAttributes(ExpressionAttributes):
    __swig_setmethods__ = {}
    for _s in [ExpressionAttributes]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReshapeAttributes, name, value)
    __swig_getmethods__ = {}
    for _s in [ExpressionAttributes]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReshapeAttributes, name)
    __repr__ = _swig_repr
    __swig_setmethods__["size"] = _cvxcanon_swig.ReshapeAttributes_size_set
    __swig_getmethods__["size"] = _cvxcanon_swig.ReshapeAttributes_size_get
    if _newclass:
        size = _swig_property(_cvxcanon_swig.ReshapeAttributes_size_get, _cvxcanon_swig.ReshapeAttributes_size_set)

    def __init__(self):
        this = _cvxcanon_swig.new_ReshapeAttributes()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _cvxcanon_swig.delete_ReshapeAttributes
    __del__ = lambda self: None
ReshapeAttributes_swigregister = _cvxcanon_swig.ReshapeAttributes_swigregister
ReshapeAttributes_swigregister(ReshapeAttributes)

class Slice(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Slice, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Slice, name)
    __repr__ = _swig_repr
    __swig_setmethods__["start"] = _cvxcanon_swig.Slice_start_set
    __swig_getmethods__["start"] = _cvxcanon_swig.Slice_start_get
    if _newclass:
        start = _swig_property(_cvxcanon_swig.Slice_start_get, _cvxcanon_swig.Slice_start_set)
    __swig_setmethods__["stop"] = _cvxcanon_swig.Slice_stop_set
    __swig_getmethods__["stop"] = _cvxcanon_swig.Slice_stop_get
    if _newclass:
        stop = _swig_property(_cvxcanon_swig.Slice_stop_get, _cvxcanon_swig.Slice_stop_set)
    __swig_setmethods__["step"] = _cvxcanon_swig.Slice_step_set
    __swig_getmethods__["step"] = _cvxcanon_swig.Slice_step_get
    if _newclass:
        step = _swig_property(_cvxcanon_swig.Slice_step_get, _cvxcanon_swig.Slice_step_set)

    def __init__(self):
        this = _cvxcanon_swig.new_Slice()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _cvxcanon_swig.delete_Slice
    __del__ = lambda self: None
Slice_swigregister = _cvxcanon_swig.Slice_swigregister
Slice_swigregister(Slice)

class IndexAttributes(ExpressionAttributes):
    __swig_setmethods__ = {}
    for _s in [ExpressionAttributes]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexAttributes, name, value)
    __swig_getmethods__ = {}
    for _s in [ExpressionAttributes]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IndexAttributes, name)
    __repr__ = _swig_repr
    __swig_setmethods__["keys"] = _cvxcanon_swig.IndexAttributes_keys_set
    __swig_getmethods__["keys"] = _cvxcanon_swig.IndexAttributes_keys_get
    if _newclass:
        keys = _swig_property(_cvxcanon_swig.IndexAttributes_keys_get, _cvxcanon_swig.IndexAttributes_keys_set)

    def __init__(self):
        this = _cvxcanon_swig.new_IndexAttributes()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _cvxcanon_swig.delete_IndexAttributes
    __del__ = lambda self: None
IndexAttributes_swigregister = _cvxcanon_swig.IndexAttributes_swigregister
IndexAttributes_swigregister(IndexAttributes)

class HuberAttributes(ExpressionAttributes):
    __swig_setmethods__ = {}
    for _s in [ExpressionAttributes]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HuberAttributes, name, value)
    __swig_getmethods__ = {}
    for _s in [ExpressionAttributes]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HuberAttributes, name)
    __repr__ = _swig_repr
    __swig_setmethods__["M"] = _cvxcanon_swig.HuberAttributes_M_set
    __swig_getmethods__["M"] = _cvxcanon_swig.HuberAttributes_M_get
    if _newclass:
        M = _swig_property(_cvxcanon_swig.HuberAttributes_M_get, _cvxcanon_swig.HuberAttributes_M_set)

    def __init__(self):
        this = _cvxcanon_swig.new_HuberAttributes()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _cvxcanon_swig.delete_HuberAttributes
    __del__ = lambda self: None
HuberAttributes_swigregister = _cvxcanon_swig.HuberAttributes_swigregister
HuberAttributes_swigregister(HuberAttributes)

class SumEntriesAttributes(ExpressionAttributes):
    __swig_setmethods__ = {}
    for _s in [ExpressionAttributes]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SumEntriesAttributes, name, value)
    __swig_getmethods__ = {}
    for _s in [ExpressionAttributes]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SumEntriesAttributes, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _cvxcanon_swig.SumEntriesAttributes_axis_set
    __swig_getmethods__["axis"] = _cvxcanon_swig.SumEntriesAttributes_axis_get
    if _newclass:
        axis = _swig_property(_cvxcanon_swig.SumEntriesAttributes_axis_get, _cvxcanon_swig.SumEntriesAttributes_axis_set)

    def __init__(self):
        this = _cvxcanon_swig.new_SumEntriesAttributes()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _cvxcanon_swig.delete_SumEntriesAttributes
    __del__ = lambda self: None
SumEntriesAttributes_swigregister = _cvxcanon_swig.SumEntriesAttributes_swigregister
SumEntriesAttributes_swigregister(SumEntriesAttributes)

class MaxEntriesAttributes(ExpressionAttributes):
    __swig_setmethods__ = {}
    for _s in [ExpressionAttributes]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaxEntriesAttributes, name, value)
    __swig_getmethods__ = {}
    for _s in [ExpressionAttributes]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaxEntriesAttributes, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _cvxcanon_swig.MaxEntriesAttributes_axis_set
    __swig_getmethods__["axis"] = _cvxcanon_swig.MaxEntriesAttributes_axis_get
    if _newclass:
        axis = _swig_property(_cvxcanon_swig.MaxEntriesAttributes_axis_get, _cvxcanon_swig.MaxEntriesAttributes_axis_set)

    def __init__(self):
        this = _cvxcanon_swig.new_MaxEntriesAttributes()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _cvxcanon_swig.delete_MaxEntriesAttributes
    __del__ = lambda self: None
MaxEntriesAttributes_swigregister = _cvxcanon_swig.MaxEntriesAttributes_swigregister
MaxEntriesAttributes_swigregister(MaxEntriesAttributes)

class SumLargestAttributes(ExpressionAttributes):
    __swig_setmethods__ = {}
    for _s in [ExpressionAttributes]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SumLargestAttributes, name, value)
    __swig_getmethods__ = {}
    for _s in [ExpressionAttributes]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SumLargestAttributes, name)
    __repr__ = _swig_repr
    __swig_setmethods__["k"] = _cvxcanon_swig.SumLargestAttributes_k_set
    __swig_getmethods__["k"] = _cvxcanon_swig.SumLargestAttributes_k_get
    if _newclass:
        k = _swig_property(_cvxcanon_swig.SumLargestAttributes_k_get, _cvxcanon_swig.SumLargestAttributes_k_set)

    def __init__(self):
        this = _cvxcanon_swig.new_SumLargestAttributes()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _cvxcanon_swig.delete_SumLargestAttributes
    __del__ = lambda self: None
SumLargestAttributes_swigregister = _cvxcanon_swig.SumLargestAttributes_swigregister
SumLargestAttributes_swigregister(SumLargestAttributes)

class LogSumExpAttributes(ExpressionAttributes):
    __swig_setmethods__ = {}
    for _s in [ExpressionAttributes]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogSumExpAttributes, name, value)
    __swig_getmethods__ = {}
    for _s in [ExpressionAttributes]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LogSumExpAttributes, name)
    __repr__ = _swig_repr
    __swig_setmethods__["axis"] = _cvxcanon_swig.LogSumExpAttributes_axis_set
    __swig_getmethods__["axis"] = _cvxcanon_swig.LogSumExpAttributes_axis_get
    if _newclass:
        axis = _swig_property(_cvxcanon_swig.LogSumExpAttributes_axis_get, _cvxcanon_swig.LogSumExpAttributes_axis_set)

    def __init__(self):
        this = _cvxcanon_swig.new_LogSumExpAttributes()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _cvxcanon_swig.delete_LogSumExpAttributes
    __del__ = lambda self: None
LogSumExpAttributes_swigregister = _cvxcanon_swig.LogSumExpAttributes_swigregister
LogSumExpAttributes_swigregister(LogSumExpAttributes)


_cvxcanon_swig.VARIABLE_swigconstant(_cvxcanon_swig)
VARIABLE = _cvxcanon_swig.VARIABLE

_cvxcanon_swig.PROMOTE_swigconstant(_cvxcanon_swig)
PROMOTE = _cvxcanon_swig.PROMOTE

_cvxcanon_swig.MUL_swigconstant(_cvxcanon_swig)
MUL = _cvxcanon_swig.MUL

_cvxcanon_swig.RMUL_swigconstant(_cvxcanon_swig)
RMUL = _cvxcanon_swig.RMUL

_cvxcanon_swig.MUL_ELEM_swigconstant(_cvxcanon_swig)
MUL_ELEM = _cvxcanon_swig.MUL_ELEM

_cvxcanon_swig.DIV_swigconstant(_cvxcanon_swig)
DIV = _cvxcanon_swig.DIV

_cvxcanon_swig.SUM_swigconstant(_cvxcanon_swig)
SUM = _cvxcanon_swig.SUM

_cvxcanon_swig.NEG_swigconstant(_cvxcanon_swig)
NEG = _cvxcanon_swig.NEG

_cvxcanon_swig.INDEX_swigconstant(_cvxcanon_swig)
INDEX = _cvxcanon_swig.INDEX

_cvxcanon_swig.TRANSPOSE_swigconstant(_cvxcanon_swig)
TRANSPOSE = _cvxcanon_swig.TRANSPOSE

_cvxcanon_swig.SUM_ENTRIES_swigconstant(_cvxcanon_swig)
SUM_ENTRIES = _cvxcanon_swig.SUM_ENTRIES

_cvxcanon_swig.TRACE_swigconstant(_cvxcanon_swig)
TRACE = _cvxcanon_swig.TRACE

_cvxcanon_swig.RESHAPE_swigconstant(_cvxcanon_swig)
RESHAPE = _cvxcanon_swig.RESHAPE

_cvxcanon_swig.DIAG_VEC_swigconstant(_cvxcanon_swig)
DIAG_VEC = _cvxcanon_swig.DIAG_VEC

_cvxcanon_swig.DIAG_MAT_swigconstant(_cvxcanon_swig)
DIAG_MAT = _cvxcanon_swig.DIAG_MAT

_cvxcanon_swig.UPPER_TRI_swigconstant(_cvxcanon_swig)
UPPER_TRI = _cvxcanon_swig.UPPER_TRI

_cvxcanon_swig.CONV_swigconstant(_cvxcanon_swig)
CONV = _cvxcanon_swig.CONV

_cvxcanon_swig.HSTACK_swigconstant(_cvxcanon_swig)
HSTACK = _cvxcanon_swig.HSTACK

_cvxcanon_swig.VSTACK_swigconstant(_cvxcanon_swig)
VSTACK = _cvxcanon_swig.VSTACK

_cvxcanon_swig.SCALAR_CONST_swigconstant(_cvxcanon_swig)
SCALAR_CONST = _cvxcanon_swig.SCALAR_CONST

_cvxcanon_swig.DENSE_CONST_swigconstant(_cvxcanon_swig)
DENSE_CONST = _cvxcanon_swig.DENSE_CONST

_cvxcanon_swig.SPARSE_CONST_swigconstant(_cvxcanon_swig)
SPARSE_CONST = _cvxcanon_swig.SPARSE_CONST

_cvxcanon_swig.NO_OP_swigconstant(_cvxcanon_swig)
NO_OP = _cvxcanon_swig.NO_OP

_cvxcanon_swig.KRON_swigconstant(_cvxcanon_swig)
KRON = _cvxcanon_swig.KRON
class LinOp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinOp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LinOp, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _cvxcanon_swig.LinOp_type_set
    __swig_getmethods__["type"] = _cvxcanon_swig.LinOp_type_get
    if _newclass:
        type = _swig_property(_cvxcanon_swig.LinOp_type_get, _cvxcanon_swig.LinOp_type_set)
    __swig_setmethods__["size"] = _cvxcanon_swig.LinOp_size_set
    __swig_getmethods__["size"] = _cvxcanon_swig.LinOp_size_get
    if _newclass:
        size = _swig_property(_cvxcanon_swig.LinOp_size_get, _cvxcanon_swig.LinOp_size_set)
    __swig_setmethods__["args"] = _cvxcanon_swig.LinOp_args_set
    __swig_getmethods__["args"] = _cvxcanon_swig.LinOp_args_get
    if _newclass:
        args = _swig_property(_cvxcanon_swig.LinOp_args_get, _cvxcanon_swig.LinOp_args_set)
    __swig_setmethods__["sparse"] = _cvxcanon_swig.LinOp_sparse_set
    __swig_getmethods__["sparse"] = _cvxcanon_swig.LinOp_sparse_get
    if _newclass:
        sparse = _swig_property(_cvxcanon_swig.LinOp_sparse_get, _cvxcanon_swig.LinOp_sparse_set)
    __swig_setmethods__["sparse_data"] = _cvxcanon_swig.LinOp_sparse_data_set
    __swig_getmethods__["sparse_data"] = _cvxcanon_swig.LinOp_sparse_data_get
    if _newclass:
        sparse_data = _swig_property(_cvxcanon_swig.LinOp_sparse_data_get, _cvxcanon_swig.LinOp_sparse_data_set)
    __swig_setmethods__["dense_data"] = _cvxcanon_swig.LinOp_dense_data_set
    __swig_getmethods__["dense_data"] = _cvxcanon_swig.LinOp_dense_data_get
    if _newclass:
        dense_data = _swig_property(_cvxcanon_swig.LinOp_dense_data_get, _cvxcanon_swig.LinOp_dense_data_set)
    __swig_setmethods__["slice"] = _cvxcanon_swig.LinOp_slice_set
    __swig_getmethods__["slice"] = _cvxcanon_swig.LinOp_slice_get
    if _newclass:
        slice = _swig_property(_cvxcanon_swig.LinOp_slice_get, _cvxcanon_swig.LinOp_slice_set)

    def __init__(self):
        this = _cvxcanon_swig.new_LinOp()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def has_constant_type(self):
        return _cvxcanon_swig.LinOp_has_constant_type(self)

    def set_dense_data(self, matrix):
        return _cvxcanon_swig.LinOp_set_dense_data(self, matrix)

    def set_sparse_data(self, data, row_idxs, col_idxs, rows, cols):
        return _cvxcanon_swig.LinOp_set_sparse_data(self, data, row_idxs, col_idxs, rows, cols)
    __swig_destroy__ = _cvxcanon_swig.delete_LinOp
    __del__ = lambda self: None
LinOp_swigregister = _cvxcanon_swig.LinOp_swigregister
LinOp_swigregister(LinOp)
CONSTANT_ID = cvar.CONSTANT_ID

class ProblemData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProblemData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProblemData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["V"] = _cvxcanon_swig.ProblemData_V_set
    __swig_getmethods__["V"] = _cvxcanon_swig.ProblemData_V_get
    if _newclass:
        V = _swig_property(_cvxcanon_swig.ProblemData_V_get, _cvxcanon_swig.ProblemData_V_set)
    __swig_setmethods__["I"] = _cvxcanon_swig.ProblemData_I_set
    __swig_getmethods__["I"] = _cvxcanon_swig.ProblemData_I_get
    if _newclass:
        I = _swig_property(_cvxcanon_swig.ProblemData_I_get, _cvxcanon_swig.ProblemData_I_set)
    __swig_setmethods__["J"] = _cvxcanon_swig.ProblemData_J_set
    __swig_getmethods__["J"] = _cvxcanon_swig.ProblemData_J_get
    if _newclass:
        J = _swig_property(_cvxcanon_swig.ProblemData_J_get, _cvxcanon_swig.ProblemData_J_set)
    __swig_setmethods__["const_vec"] = _cvxcanon_swig.ProblemData_const_vec_set
    __swig_getmethods__["const_vec"] = _cvxcanon_swig.ProblemData_const_vec_get
    if _newclass:
        const_vec = _swig_property(_cvxcanon_swig.ProblemData_const_vec_get, _cvxcanon_swig.ProblemData_const_vec_set)
    __swig_setmethods__["id_to_col"] = _cvxcanon_swig.ProblemData_id_to_col_set
    __swig_getmethods__["id_to_col"] = _cvxcanon_swig.ProblemData_id_to_col_get
    if _newclass:
        id_to_col = _swig_property(_cvxcanon_swig.ProblemData_id_to_col_get, _cvxcanon_swig.ProblemData_id_to_col_set)
    __swig_setmethods__["const_to_row"] = _cvxcanon_swig.ProblemData_const_to_row_set
    __swig_getmethods__["const_to_row"] = _cvxcanon_swig.ProblemData_const_to_row_get
    if _newclass:
        const_to_row = _swig_property(_cvxcanon_swig.ProblemData_const_to_row_get, _cvxcanon_swig.ProblemData_const_to_row_set)

    def getV(self, values):
        return _cvxcanon_swig.ProblemData_getV(self, values)

    def getI(self, values):
        return _cvxcanon_swig.ProblemData_getI(self, values)

    def getJ(self, values):
        return _cvxcanon_swig.ProblemData_getJ(self, values)

    def getConstVec(self, values):
        return _cvxcanon_swig.ProblemData_getConstVec(self, values)

    def __init__(self):
        this = _cvxcanon_swig.new_ProblemData()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _cvxcanon_swig.delete_ProblemData
    __del__ = lambda self: None
ProblemData_swigregister = _cvxcanon_swig.ProblemData_swigregister
ProblemData_swigregister(ProblemData)

class SolverOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SolverOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SolverOptions, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _cvxcanon_swig.new_SolverOptions()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _cvxcanon_swig.delete_SolverOptions
    __del__ = lambda self: None
SolverOptions_swigregister = _cvxcanon_swig.SolverOptions_swigregister
SolverOptions_swigregister(SolverOptions)

class Solution(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Solution, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Solution, name)
    __repr__ = _swig_repr
    __swig_setmethods__["status"] = _cvxcanon_swig.Solution_status_set
    __swig_getmethods__["status"] = _cvxcanon_swig.Solution_status_get
    if _newclass:
        status = _swig_property(_cvxcanon_swig.Solution_status_get, _cvxcanon_swig.Solution_status_set)
    __swig_setmethods__["variable_values"] = _cvxcanon_swig.Solution_variable_values_set
    __swig_getmethods__["variable_values"] = _cvxcanon_swig.Solution_variable_values_get
    if _newclass:
        variable_values = _swig_property(_cvxcanon_swig.Solution_variable_values_get, _cvxcanon_swig.Solution_variable_values_set)
    __swig_setmethods__["objective_value"] = _cvxcanon_swig.Solution_objective_value_set
    __swig_getmethods__["objective_value"] = _cvxcanon_swig.Solution_objective_value_get
    if _newclass:
        objective_value = _swig_property(_cvxcanon_swig.Solution_objective_value_get, _cvxcanon_swig.Solution_objective_value_set)

    def __init__(self):
        this = _cvxcanon_swig.new_Solution()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _cvxcanon_swig.delete_Solution
    __del__ = lambda self: None
Solution_swigregister = _cvxcanon_swig.Solution_swigregister
Solution_swigregister(Solution)

class Solver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Solver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Solver, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cvxcanon_swig.delete_Solver
    __del__ = lambda self: None

    def solve(self, problem):
        return _cvxcanon_swig.Solver_solve(self, problem)
Solver_swigregister = _cvxcanon_swig.Solver_swigregister
Solver_swigregister(Solver)


def solve(problem, solver_options):
    return _cvxcanon_swig.solve(problem, solver_options)
solve = _cvxcanon_swig.solve

def validate(problem, solver_options):
    return _cvxcanon_swig.validate(problem, solver_options)
validate = _cvxcanon_swig.validate

_cvxcanon_swig.OPTIMAL_swigconstant(_cvxcanon_swig)
OPTIMAL = _cvxcanon_swig.OPTIMAL

_cvxcanon_swig.INFEASIBLE_swigconstant(_cvxcanon_swig)
INFEASIBLE = _cvxcanon_swig.INFEASIBLE

_cvxcanon_swig.UNBOUNDED_swigconstant(_cvxcanon_swig)
UNBOUNDED = _cvxcanon_swig.UNBOUNDED

_cvxcanon_swig.USER_LIMIT_swigconstant(_cvxcanon_swig)
USER_LIMIT = _cvxcanon_swig.USER_LIMIT

_cvxcanon_swig.ERROR_swigconstant(_cvxcanon_swig)
ERROR = _cvxcanon_swig.ERROR
# This file is compatible with both classic and new-style classes.


